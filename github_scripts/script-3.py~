from github3 import GitHub
from urllib.parse import urljoin
from xml.dom import minidom
import requests
# import github3 as gh

gh = GitHub()
token = 'ce6cba0be2bf2b0b25f2a0e0920ac56f09e365d7'
REPO_QUERY = 'language:java stars:>8000'  # pushed:>2016-12'


def scan_dependencies(url, buf):
    response = requests.get(url)
    deps = []

    if response.ok:
        with open(buf, "w") as f:
            f.write(response.text)

        dom = minidom.parse(buf)
        depend = dom.getElementsByTagName("dependency")

        for dep in depend:
            info = []

            gpId = dep.getElementsByTagName("groupId")
            if gpId != []:
                info.append(gpId[0].firstChild.data)
            else:
                continue

            artId = dep.getElementsByTagName("artifactId")
            if artId != []:
                info.append(artId[0].firstChild.data)
            else:
                continue

            version = dep.getElementsByTagName("version")
            if version != []:
                info.append(version[0].firstChild.data)
            else:
                continue
            deps.append(info)
    return(deps)


def get_modules(buf):
    dom = minidom.parse(buf)
    modules = dom.getElementsByTagName("module")

    return([m.firstChild.data for m in modules])


def main():
    log = gh.login(token)
    # , sort='stars', per_page=100)
    repos = gh.search_repositories(query=REPO_QUERY)
    repos_deps = {}
    for result in repos:
        foundRepo = result.repository
        deps = []

        print('Inspecting', foundRepo.full_name)
        url = 'https://raw.githubusercontent.com/' + \
            foundRepo.full_name + '/master/pom.xml'

        item = (foundRepo, url)
        response = requests.get(url)

        if not response.ok:
            continue

        deps.append(scan_dependencies(url, "pom.xml"))

        modules = get_modules("pom.xml")

        for m in modules:
            url = "https://raw.githubusercontent.com/" + foundRepo.full_name \
                + "/master/" + m + "pom.xml"

            deps.append(scan_dependencies(url, "module_pom.xml"))

        repos_deps[foundRepo.name] = deps
    print(repos_deps["spark"])


    # TODO
    # get the pom.xml and parse it to find the dependecies
# if __name__ == '__main__':
#    main()
main()
